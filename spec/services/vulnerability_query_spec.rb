require 'rails_helper'

RSpec.describe VulnerabilityQuery do
  let(:vulnerabilities) { Vulnerability.joins(:vulnerability_detail, :host) }
  let(:vd1) { FactoryGirl.create(:vulnerability_detail, 
               name: '4013389', threat: 'High', severity: '9.3')}
  let(:vd2) { FactoryGirl.create(:vulnerability_detail, 
               name: 'Old MySQL', threat: 'Medium', severity: '6.7')}
  let(:vd3) { FactoryGirl.create(:vulnerability_detail, 
               name: 'Old Service', threat: 'Low', severity: '2.5')}

  let(:host1) { FactoryGirl.create(:host, ip: '198.51.100.17') }
  let(:host2) { FactoryGirl.create(:host, ip: '198.51.100.63') }
  let(:host3) { FactoryGirl.create(:host, ip: '192.0.2.17') }

  let!(:vuln11) { FactoryGirl.create(:vulnerability, host: host1, vulnerability_detail: vd1) }
  let!(:vuln12) { FactoryGirl.create(:vulnerability, host: host1, vulnerability_detail: vd2) }
  let!(:vuln13) { FactoryGirl.create(:vulnerability, host: host1, vulnerability_detail: vd3) }
  let!(:vuln22) { FactoryGirl.create(:vulnerability, host: host2, vulnerability_detail: vd2) }
  let!(:vuln23) { FactoryGirl.create(:vulnerability, host: host2, vulnerability_detail: vd3) }
  let!(:vuln33) { FactoryGirl.create(:vulnerability, host: host3, vulnerability_detail: vd3) }

  # check for class methods
  it { expect(VulnerabilityQuery.respond_to? :new).to be_truthy}

  it "raise an ArgumentError" do
  expect {
    VulnerabilityQuery.new
  }.to raise_error(ArgumentError)
  end

 # check for instance methods
  describe "instance methods" do
    subject { VulnerabilityQuery.new(vulnerabilities) }
    it { expect(subject.respond_to? :all).to be_truthy}
    it { expect(subject.respond_to? :find_each).to be_truthy}
    it { expect(subject.respond_to? :include?).to be_truthy }
  end

 context "with unknown option :fasel" do
    subject { VulnerabilityQuery.new(vulnerabilities, {fasel: 'blubb'}) }
    describe "#all" do
      it "raises a argument error" do
        expect { subject.all }.to raise_error(ArgumentError)
      end
    end
  end

  context "with :name" do
    subject { VulnerabilityQuery.new(vulnerabilities, {name: 'Old'}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(vuln12, vuln22, vuln13, vuln23, vuln33) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(vuln12, vuln22, vuln13, vuln23, vuln33)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(vuln11)).to be_falsey }
      it { expect(subject.include?(vuln12)).to be_truthy }
      it { expect(subject.include?(vuln13)).to be_truthy }
      it { expect(subject.include?(vuln22)).to be_truthy }
      it { expect(subject.include?(vuln23)).to be_truthy }
      it { expect(subject.include?(vuln33)).to be_truthy }
    end
  end # search :name

  context "with :limit" do
    subject { VulnerabilityQuery.new(vulnerabilities, {limit: 3}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(vuln11, vuln12, vuln13) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(vuln11, vuln12, vuln13)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(vuln11)).to be_truthy }
      it { expect(subject.include?(vuln12)).to be_truthy }
      it { expect(subject.include?(vuln13)).to be_truthy }
    end
  end # search :limit

  context "with :operating_system" do
    subject { VulnerabilityQuery.new(vulnerabilities, {operating_system: 'ummyO'}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(pc2, nas) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(pc2.id, nas.id)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(vuln11)).to be_truthy }
    end
  end # search :operating_system

  context "with :threat" do
    subject { VulnerabilityQuery.new(vulnerabilities, {threat: 'High'}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(vuln11) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(vuln)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(vuln11)).to be_truthy }
    end
  end # search :threat

  context "with :severity" do
    subject { VulnerabilityQuery.new(vulnerabilities, {severity: '6.0'}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(vuln11, vuln12, vuln22) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(vuln11, vuln12, vuln22)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(vuln11)).to be_truthy }
      it { expect(subject.include?(vuln12)).to be_truthy }
      it { expect(subject.include?(vuln13)).to be_falsey }
      it { expect(subject.include?(vuln22)).to be_truthy }
      it { expect(subject.include?(vuln23)).to be_falsey }
      it { expect(subject.include?(vuln33)).to be_falsey }
    end
  end # search :severity

  context "with :ip as string match" do
    subject { VulnerabilityQuery.new(vulnerabilities, {ip: '198.51.100'}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(vuln11, vuln12, vuln13, vuln22, vuln23) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(vuln11, vuln12, vuln13, vuln22, vuln23)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(vuln11)).to be_truthy }
      it { expect(subject.include?(vuln12)).to be_truthy }
      it { expect(subject.include?(vuln13)).to be_truthy }
      it { expect(subject.include?(vuln22)).to be_truthy }
      it { expect(subject.include?(vuln23)).to be_truthy }
      it { expect(subject.include?(vuln33)).to be_falsey }
    end
  end # search :ip string match

  context "with :ip as subnet" do
    subject { VulnerabilityQuery.new(vulnerabilities, {ip: '198.51.100.0/26'}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(vuln11, vuln12, vuln13) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(vuln11, vuln12, vuln13)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(vuln11)).to be_truthy }
      it { expect(subject.include?(vuln12)).to be_truthy }
      it { expect(subject.include?(vuln13)).to be_truthy }
      it { expect(subject.include?(vuln22)).to be_falsey }
      it { expect(subject.include?(vuln23)).to be_falsey }
      it { expect(subject.include?(vuln33)).to be_falsey }

    end
  end # search :ip subnet match

  context "with :lastseen" do
    subject { VulnerabilityQuery.new(vulnerabilities, {lastseen: Date.today.to_s[0,7]}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(nas, pc2, pc3) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(nas.id, pc2.id, pc3.id)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(nas)).to be_truthy }
      it { expect(subject.include?(pc2)).to be_truthy }
      it { expect(subject.include?(pc3)).to be_truthy }
      it { expect(subject.include?(pc5)).to be_falsey }
      it { expect(subject.include?(vpngw)).to be_falsey }
    end
  end # search :lastseen

  context "with :lid" do
    subject { VulnerabilityQuery.new(vulnerabilities, {lid: 'paRis'}) }
    describe "#all" do
      it { expect(subject.all).to contain_exactly(nas) }
    end
    describe "#find_each" do
      it "executes matching vulns" do
        vulns = []
        subject.find_each do |vuln|
          vulns << vuln.id
        end
        expect(vulns).to contain_exactly(nas.id)
      end
    end
    describe "#include?" do
      it { expect(subject.include?(nas)).to be_truthy }
      it { expect(subject.include?(pc2)).to be_falsey }
      it { expect(subject.include?(pc3)).to be_falsey }
      it { expect(subject.include?(pc5)).to be_falsey }
      it { expect(subject.include?(vpngw)).to be_falsey }
    end
  end # search :lid

  describe "#all" do
    pending "comming enxt"
    context "with search: 'nas'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'nas'}) }
      it { expect(subject.all).to contain_exactly(nas) }
    end
    context "with search: '198.51.100'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: '198.51.100'}) }
      it { expect(subject.all).to contain_exactly(nas, pc2, pc3, pc5) }
    end
    context "with search: '198.51.100.0/26'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: '198.51.100.0/26'}) }
      it { expect(subject.all).to contain_exactly(nas, pc2) }
    end
    context "with search: #{Date.today.to_s[0,7]}" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: Date.today.to_s[0,7]}) }
      it { expect(subject.all).to contain_exactly(nas, pc2, pc3) }
    end
    context "with search: 'linux'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'firewall'}) }
      it { expect(subject.all).to contain_exactly(vpngw) }
    end
    context "with search: 'PariS'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'PariS'}) }
      it { expect(subject.all).to contain_exactly(nas) }
    end
  end
end
