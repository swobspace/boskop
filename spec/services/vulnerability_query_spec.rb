require 'rails_helper'

RSpec.shared_examples "a vulnerability query" do
  describe "#all" do
    it { expect(subject.all).to contain_exactly(*@matching) }
  end
  describe "#find_each" do
    it "iterates over matching events" do
      a = []
      subject.find_each do |act|
        a << act
      end
      expect(a).to contain_exactly(*@matching)
    end
  end
  describe "#include?" do
    it "includes only matching events" do
      @matching.each do |ma|
        expect(subject.include?(ma)).to be_truthy
      end
      @nonmatching.each do |noma|
        expect(subject.include?(noma)).to be_falsey
      end
    end
  end
end

RSpec.describe VulnerabilityQuery do
  include_context "vulnerability variables"
  let(:vulnerabilities) { Vulnerability.left_outer_joins(
    :vulnerability_detail, host: [ :network_interfaces, :host_category, :operating_system, :location ]
  )}

  # check for class methods
  it { expect(VulnerabilityQuery.respond_to? :new).to be_truthy}

  it "raise an ArgumentError" do
  expect {
    VulnerabilityQuery.new
  }.to raise_error(ArgumentError)
  end

 # check for instance methods
  describe "instance methods" do
    subject { VulnerabilityQuery.new(vulnerabilities) }
    it { expect(subject.respond_to? :all).to be_truthy}
    it { expect(subject.respond_to? :find_each).to be_truthy}
    it { expect(subject.respond_to? :include?).to be_truthy }
  end

 context "with unknown option :fasel" do
    subject { VulnerabilityQuery.new(vulnerabilities, {fasel: 'blubb'}) }
    describe "#all" do
      it "raises a argument error" do
        expect { subject.all }.to raise_error(ArgumentError)
      end
    end
  end

  context "with :hostname" do
    subject { VulnerabilityQuery.new(vulnerabilities, {hostname: 'my.domain'}) }
    before(:each) do
      @matching = [vuln11, vuln12, vuln13, vuln22, vuln23]
      @nonmatching = [vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :hostname

  context "with :name" do
    subject { VulnerabilityQuery.new(vulnerabilities, {name: 'Old'}) }
    before(:each) do
      @matching = [vuln12, vuln13, vuln22, vuln23, vuln33]
      @nonmatching = [vuln11]
    end
    it_behaves_like "a vulnerability query"
  end # search :name

  context "with :limit = 3" do
    subject { VulnerabilityQuery.new(vulnerabilities, {limit: "3"}) }
    before(:each) do
      @matching = [vuln11, vuln12, vuln13]
      @nonmatching = [] # should be [vuln22, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :limit

  context "with :limit = 0" do
    subject { VulnerabilityQuery.new(vulnerabilities, {limit: "0"}) }
    before(:each) do
      @matching = [vuln11, vuln12, vuln13, vuln22, vuln23, vuln33]
      @nonmatching = []
    end
    it_behaves_like "a vulnerability query"
  end # search :limit

  context "with :operating_system" do
    subject { VulnerabilityQuery.new(vulnerabilities, {operating_system: 'ummyO'}) }
    before(:each) do
      @matching = [vuln22, vuln23]
      @nonmatching = [vuln11, vuln12, vuln13, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :operating_system

  context "with :host_category" do
    subject { VulnerabilityQuery.new(vulnerabilities, {host_category: 'erveR'}) }
    before(:each) do
      @matching = [vuln33]
      @nonmatching = [vuln11, vuln12, vuln13, vuln22, vuln23]
    end
    it_behaves_like "a vulnerability query"
  end # search :host_category

  context "with :threat" do
    subject { VulnerabilityQuery.new(vulnerabilities, {threat: 'High'}) }
    before(:each) do
      @matching = [vuln11]
      @nonmatching = [vuln33, vuln12, vuln13, vuln22, vuln23]
    end
    it_behaves_like "a vulnerability query"
  end # search :threat

  context "with :critical" do
    let(:vd0) { FactoryBot.create(:vulnerability_detail,
                 name: 'MS08-067', threat: 'Critical', severity: '10.0')}
    let(:host0) { FactoryBot.create(:host,
      name: 'xyz.foreign.domain',
      operating_system: os1,
    )}
    let!(:if_host0) { FactoryBot.create(:network_interface,
      host: host0,
      ip: '203.0.113.1',
    )}
    let!(:vuln00) { FactoryBot.create(:vulnerability,
      host: host0,
      vulnerability_detail: vd0,
      lastseen: '2017-01-01'
    )}

    subject { VulnerabilityQuery.new(vulnerabilities, {critical: true}) }
    before(:each) do
      @matching = [vuln00, vuln11]
      @nonmatching = [vuln12, vuln13, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :threat

  context "with :severity" do
    subject { VulnerabilityQuery.new(vulnerabilities, {severity: '6.0'}) }
    before(:each) do
      @matching = [vuln11, vuln12, vuln22]
      @nonmatching = [vuln13, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :severity

  context "with :ip as string match" do
    subject { VulnerabilityQuery.new(vulnerabilities, {ip: '198.51.100'}) }
    before(:each) do
      @matching = [vuln11, vuln12, vuln13, vuln22, vuln23]
      @nonmatching = [vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :ip string match

  context "with :ip as subnet" do
    subject { VulnerabilityQuery.new(vulnerabilities, {ip: '198.51.100.0/26'}) }
    before(:each) do
      @matching = [vuln11, vuln12, vuln13]
      @nonmatching = [vuln22, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :ip subnet match

  context "with :lastseen" do
    subject { VulnerabilityQuery.new(vulnerabilities, {lastseen: '2017-04'}) }
    before(:each) do
      @matching = [vuln13, vuln22]
      @nonmatching = [vuln11, vuln12, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :lastseen

  context "with :created_at" do
    subject { VulnerabilityQuery.new(vulnerabilities, {created_at: '2017-01'}) }
    before(:each) do
      @matching = [vuln13, vuln22]
      @nonmatching = [vuln11, vuln12, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :lastseen


  context "with :at" do
    subject { VulnerabilityQuery.new(vulnerabilities, {at: '2017-04-01'}) }
    before(:each) do
      @matching = [vuln13, vuln22]
      @nonmatching = [vuln11, vuln12, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :at

  context "with :newer" do
    subject { VulnerabilityQuery.new(vulnerabilities, {newer: '2017-04-01'}) }
    before(:each) do
      @matching = [vuln13, vuln22, vuln23, vuln33]
      @nonmatching = [vuln11, vuln12]
    end
    it_behaves_like "a vulnerability query"
  end # search :newer

  context "with :newer" do
    subject { VulnerabilityQuery.new(vulnerabilities, {newer: '2017-04-01'}) }
    before(:each) do
      @matching = [vuln13, vuln22, vuln23, vuln33]
      @nonmatching = [vuln11, vuln12]
    end
    it_behaves_like "a vulnerability query"
  end # search :since

  context "with :older" do
    subject { VulnerabilityQuery.new(vulnerabilities, {older: '2017-02-01'}) }
    before(:each) do
      @matching = [vuln11]
      @nonmatching = [vuln12, vuln13, vuln22, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search :older

  context "with :lid" do
    subject { VulnerabilityQuery.new(vulnerabilities, {lid: 'PARIS'}) }
    before(:each) do
      @matching = [vuln33]
      @nonmatching = [vuln12, vuln13, vuln22, vuln23, vuln11]
    end
    it_behaves_like "a vulnerability query"
  end # search :lid

  context "with multiple :lid" do
    subject { VulnerabilityQuery.new(vulnerabilities, {lid: 'BER, PARIS'}) }
    before(:each) do
      @matching = [vuln11, vuln12, vuln13, vuln33]
      @nonmatching = [vuln22, vuln23]
    end
    it_behaves_like "a vulnerability query"
  end # search multiple :plugin_output

  context "with :plugin_output" do
    subject { VulnerabilityQuery.new(vulnerabilities, {plugin_output: 'bbelfas'}) }
    before(:each) do
      @matching = [vuln11, vuln12]
      @nonmatching = [vuln13, vuln22, vuln23, vuln33]
    end
    it_behaves_like "a vulnerability query"
  end # search multiple :plugin_output


  describe "#all" do
    context "with search: 'Old'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'Old'}) }
      it { expect(subject.all).to contain_exactly(vuln12, vuln22, vuln13, vuln23, vuln33) }
    end
    context "with search: 'Server'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'ServEr'}) }
      it { expect(subject.all).to contain_exactly(vuln33) }
    end
    context "with search: 'other.domain'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'other.domain'}) }
      it { expect(subject.all).to contain_exactly(vuln33) }
    end
    context "with search: '198.51.100'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: '198.51.100'}) }
      it { expect(subject.all).to contain_exactly(vuln11, vuln12, vuln13, vuln22, vuln23) }
    end
    context "with search: '198.51.100.0/26'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: '198.51.100.0/26'}) }
      it { expect(subject.all).to contain_exactly(vuln11, vuln12, vuln13) }
    end
    context "with search: #{Date.today.to_s[0,7]}" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: '2017-04'}) }
      it { expect(subject.all).to contain_exactly(vuln13,vuln22) }
    end
    context "with search: 'linux'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'ummyO'}) }
      it { expect(subject.all).to contain_exactly(vuln22, vuln23) }
    end
    context "with search: 'PariS'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'PariS'}) }
      it { expect(subject.all).to contain_exactly(vuln33) }
    end
    context "with search: 'bbelfas'" do
      subject { VulnerabilityQuery.new(vulnerabilities, {search: 'bbelfas'}) }
      it { expect(subject.all).to contain_exactly(vuln11, vuln12) }
    end
  end
end
