require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LinesController, type: :controller do
  login_admin

  # This should return the minimal set of attributes required to create a valid
  # Line. As you add validations to Line, be sure to
  # adjust the attributes here as well.

  let!(:location) { FactoryBot.create(:location) }
  let!(:access_type) { FactoryBot.create(:access_type) }
  let!(:line_state) { FactoryBot.create(:line_state) }
  let(:valid_attributes) {
    FactoryBot.attributes_for(:line, 
      location_a_id: location.id, 
      access_type_id: access_type.id,
      line_state_id: line_state.id)
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LinesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all lines as @lines" do
      line = Line.create! valid_attributes
      get :index, params: {}
      expect(assigns(:lines)).to eq([line])
    end
  end

  describe "GET #show" do
    it "assigns the requested line as @line" do
      line = Line.create! valid_attributes
      get :show, params: {:id => line.to_param}
      expect(assigns(:line)).to eq(line)
    end
  end

  describe "GET #new" do
    it "assigns a new line as @line" do
      get :new, params: {}
      expect(assigns(:line)).to be_a_new(Line)
    end
  end

  describe "GET #edit" do
    it "assigns the requested line as @line" do
      line = Line.create! valid_attributes
      get :edit, params: {:id => line.to_param}
      expect(assigns(:line)).to eq(line)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Line" do
        expect {
          post :create, params: {:line => valid_attributes}
        }.to change(Line, :count).by(1)
      end

      it "assigns a newly created line as @line" do
        post :create, params: {:line => valid_attributes}
        expect(assigns(:line)).to be_a(Line)
        expect(assigns(:line)).to be_persisted
      end

      it "redirects to the created line" do
        post :create, params: {:line => valid_attributes}
        expect(response).to redirect_to(Line.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved line as @line" do
        post :create, params: {:line => invalid_attributes}
        expect(assigns(:line)).to be_a_new(Line)
      end

      it "re-renders the 'new' template" do
        post :create, params: {:line => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { description: "internet connection for fun with small typo fixes" }
      }

      it "updates the requested line" do
        line = Line.create! valid_attributes
        put :update, params: {:id => line.to_param, :line => new_attributes}
        line.reload
        expect(line.description).to eq("internet connection for fun with small typo fixes")

      end

      it "assigns the requested line as @line" do
        line = Line.create! valid_attributes
        put :update, params: {:id => line.to_param, :line => valid_attributes}
        expect(assigns(:line)).to eq(line)
      end

      it "redirects to the line" do
        line = Line.create! valid_attributes
        put :update, params: {:id => line.to_param, :line => valid_attributes}
        expect(response).to redirect_to(line)
      end
    end

    context "with invalid params" do
      it "assigns the line as @line" do
        line = Line.create! valid_attributes
        put :update, params: {:id => line.to_param, :line => invalid_attributes}
        expect(assigns(:line)).to eq(line)
      end

      it "re-renders the 'edit' template" do
        line = Line.create! valid_attributes
        put :update, params: {:id => line.to_param, :line => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested line" do
      line = Line.create! valid_attributes
      expect {
        delete :destroy, params: {:id => line.to_param}
      }.to change(Line, :count).by(-1)
    end

    it "redirects to the lines list" do
      line = Line.create! valid_attributes
      delete :destroy, params: {:id => line.to_param}
      expect(response).to redirect_to(lines_url)
    end
  end

end
