require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MerkmaleController, :type => :controller do
  login_admin

  # This should return the minimal set of attributes required to create a valid
  # Merkmal. As you add validations to Merkmal, be sure to
  # adjust the attributes here as well.
  let!(:location) { FactoryBot.create(:location) }
  let!(:merkmalklasse) { FactoryBot.create(:merkmalklasse) }
  let(:valid_attributes) {
    FactoryBot.attributes_for(:merkmal, merkmalfor_id: location.id, 
                               merkmalfor_type: "#{location.class}",
                               merkmalklasse_id: merkmalklasse.id)
  }

  let(:invalid_attributes) {
    { merkmalklasse_id: nil }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MerkmaleController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all merkmale as @merkmale" do
      merkmal = Merkmal.create! valid_attributes
      get :index, params: {}
      expect(assigns(:merkmale)).to eq([merkmal])
    end
  end

  describe "GET show" do
    it "assigns the requested merkmal as @merkmal" do
      merkmal = Merkmal.create! valid_attributes
      get :show, params: {:id => merkmal.to_param}
      expect(assigns(:merkmal)).to eq(merkmal)
    end
  end

  describe "GET new" do
    it "assigns a new merkmal as @merkmal" do
      get :new, params: {}
      expect(assigns(:merkmal)).to be_a_new(Merkmal)
    end
  end

  describe "GET edit" do
    it "assigns the requested merkmal as @merkmal" do
      merkmal = Merkmal.create! valid_attributes
      get :edit, params: {:id => merkmal.to_param}
      expect(assigns(:merkmal)).to eq(merkmal)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Merkmal" do
        expect {
          post :create, params: {:merkmal => valid_attributes}
        }.to change(Merkmal, :count).by(1)
      end

      it "assigns a newly created merkmal as @merkmal" do
        post :create, params: {:merkmal => valid_attributes}
        expect(assigns(:merkmal)).to be_a(Merkmal)
        expect(assigns(:merkmal)).to be_persisted
      end

      it "redirects to the created merkmal" do
        post :create, params: {:merkmal => valid_attributes}
        expect(response).to redirect_to(Merkmal.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved merkmal as @merkmal" do
        post :create, params: {:merkmal => invalid_attributes}
        expect(assigns(:merkmal)).to be_a_new(Merkmal)
      end

      it "re-renders the 'new' template" do
        post :create, params: {:merkmal => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        { value: "neuer Wert" }
      }

      it "updates the requested merkmal" do
        merkmal = Merkmal.create! valid_attributes
        put :update, params: {:id => merkmal.to_param, :merkmal => new_attributes}
        merkmal.reload
        expect(merkmal.value).to be == "neuer Wert"
      end

      it "assigns the requested merkmal as @merkmal" do
        merkmal = Merkmal.create! valid_attributes
        put :update, params: {:id => merkmal.to_param, :merkmal => valid_attributes}
        expect(assigns(:merkmal)).to eq(merkmal)
      end

      it "redirects to the merkmal" do
        merkmal = Merkmal.create! valid_attributes
        put :update, params: {:id => merkmal.to_param, :merkmal => valid_attributes}
        expect(response).to redirect_to(merkmal)
      end
    end

    describe "with invalid params" do
      it "assigns the merkmal as @merkmal" do
        merkmal = Merkmal.create! valid_attributes
        put :update, params: {:id => merkmal.to_param, :merkmal => invalid_attributes}
        expect(assigns(:merkmal)).to eq(merkmal)
      end

      it "re-renders the 'edit' template" do
        merkmal = Merkmal.create! valid_attributes
        put :update, params: {:id => merkmal.to_param, :merkmal => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested merkmal" do
      merkmal = Merkmal.create! valid_attributes
      expect {
        delete :destroy, params: {:id => merkmal.to_param}
      }.to change(Merkmal, :count).by(-1)
    end

    it "redirects to the merkmale list" do
      merkmal = Merkmal.create! valid_attributes
      delete :destroy, params: {:id => merkmal.to_param}
      expect(response).to redirect_to(merkmale_url)
    end
  end

end
