require 'rails_helper'

RSpec.describe HostConcerns, type: :model do
  let(:loc1)   { FactoryBot.create(:location, lid: 'ABC') }
  let(:loc2)   { FactoryBot.create(:location, lid: 'XYZ') }
  let(:os1) { FactoryBot.create(:operating_system, name: "ZementOS") }
  let(:os2) { FactoryBot.create(:operating_system, name: "PlainOS") }
  let(:hc)  { FactoryBot.create(:host_category, name: 'CategoryA') }


  let!(:host1) { FactoryBot.create(:host, 
    ip: '192.0.2.71', 
    host_category: hc,
    name: 'Host71', 
    operating_system: os1,
    location: loc1
  )}
  let!(:host2) { FactoryBot.create(:host, 
    ip: '192.0.2.66', 
    name: 'Host66', 
    operating_system: os2,
    location: loc2
  )}

  let(:h)  { FactoryBot.create(:vulnerability_detail, name: "Oops", threat: 'High', severity: 9.3)}
  let(:h2) { FactoryBot.create(:vulnerability_detail, name: "Risky", threat: 'High', severity: 9.0)}
  let(:m) { FactoryBot.create(:vulnerability_detail, name: "Also", threat: 'Medium', severity: 5.0)}
  let(:l) { FactoryBot.create(:vulnerability_detail, name: 'Latter', threat: 'Low', severity: 2.1)}

  let!(:v1h) { FactoryBot.create(:vulnerability, host: host1, vulnerability_detail: h)}
  let!(:v1m) { FactoryBot.create(:vulnerability, host: host1, vulnerability_detail: m)}

  let!(:v2h2) { FactoryBot.create(:vulnerability, host: host2, vulnerability_detail: h2)}
  let!(:v2l) { FactoryBot.create(:vulnerability, host: host2, vulnerability_detail: l)}


  describe "::to_csv" do
    it "renders csv" do
      csv = CSV.parse(Vulnerability.to_csv)
      expect(csv.shift).to contain_exactly(
                I18n.t('attributes.lid'),
                I18n.t('attributes.host'),
                I18n.t('attributes.ip'),
                I18n.t('attributes.host_category'),
                I18n.t('attributes.operating_system'),
                I18n.t('attributes.vulnerability_detail'),
                I18n.t('attributes.threat'),
                I18n.t('attributes.severity'),
                I18n.t('attributes.lastseen'),
              )
      expect(csv).to contain_exactly(
        ["ABC", "Host71", "192.0.2.71", "CategoryA", "ZementOS", "Oops", "High", "9.3", Date.today.to_s], 
        ["ABC", "Host71", "192.0.2.71", "CategoryA", "ZementOS", "Also", "Medium", "5.0", Date.today.to_s], 
        ["XYZ", "Host66", "192.0.2.66", "", "PlainOS",  "Risky", "High", "9.0", Date.today.to_s], 
        ["XYZ", "Host66", "192.0.2.66", "", "PlainOS",  "Latter", "Low", "2.1", Date.today.to_s], 
      )
    end
  end
  describe "#to_gelf" do
    it "renders gelf hash" do
      expect(v1h.to_gelf).to include(
        short_message: "Oops",
        long_message: "ABC/Host71/Oops/High/9.3",
        timestamp: 12.hours.after(Date.today.to_time).utc.to_f,
        _lid:      "ABC",
        _hostname: "Host71",
        _ip_address:  "192.0.2.71",
        _host_category: "CategoryA",
        _operating_system: "ZementOS",
        _vulneratility_name: "Oops",
        _nvt: v1h.vulnerability_detail.nvt,
        _threat: "High",
        _severity: "9.3",
        _lastseen: Date.today.to_s
      )
    end
  end
end
