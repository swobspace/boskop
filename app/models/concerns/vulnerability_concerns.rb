require 'csv'

module VulnerabilityConcerns
  extend ActiveSupport::Concern

  included do
    def self.to_csv(**options)
      CSV.generate(**options) do |csv|
        csv << [ 
                I18n.t('attributes.lid'),
		I18n.t('attributes.host'),
		I18n.t('attributes.ip'),
		I18n.t('attributes.host_category'),
		I18n.t('attributes.operating_system'),
		I18n.t('attributes.vulnerability_detail'),
		I18n.t('attributes.plugin_output'),
		I18n.t('attributes.threat'),
		I18n.t('attributes.severity'),
		I18n.t('attributes.lastseen'),
		I18n.t('attributes.created_at'),
               ]
        all.each do |vuln|
          csv << [ 
		  vuln.host&.location&.lid,
		  vuln.host.name,
		  vuln.host.ip.to_s,
		  vuln.host&.host_category.to_s,
		  vuln.host&.operating_system.to_s,
		  vuln.vulnerability_detail.to_s,
		  vuln.plugin_output,
		  vuln.vulnerability_detail.threat,
		  vuln.vulnerability_detail.severity,
		  vuln.lastseen,
		  vuln.created_at.to_date,
                 ]
        end # all.each
      end # CSV
    end # self.to_csv
  end # included do

#
# GELF::Notifier.new.notify(vuln.to_gelf)
#
  def to_gelf
    {
      short_message:       "#{to_s}",
      long_message:        "#{host&.location&.lid}/#{host.name}/#{to_s}/#{vulnerability_detail.threat}/#{vulnerability_detail.severity.to_s}",
      timestamp:           12.hours.after(lastseen.to_time).utc.to_f,
      _lid:                host&.location&.lid,
      _hostname:           host.name,
      _ip_address:         host.ip.to_s,
      _host_category:      host&.host_category.to_s,
      _operating_system:   host&.operating_system.to_s,
      _vulneratility_name: vulnerability_detail.to_s,
      _nvt:                vulnerability_detail.nvt,
      _threat:             vulnerability_detail.threat,
      _severity:           vulnerability_detail.severity.to_s,
      _lastseen:           lastseen.to_s,
    }
  end

end

