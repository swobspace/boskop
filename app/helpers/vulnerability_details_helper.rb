module VulnerabilityDetailsHelper

  #
  # format: URL:http://anywhere
  #
  def link_to_xrefs(xrefs)
    xrefs.map do |xref|
      type, ref = xref.split(/:/, 2)
      case type
      when 'URL'
        link_to "#{ref}", ref, target: '_blank'
      when 'MSFT'
        ref =~ /MS([0-9][0-9])-[0-9]+/
        year = 2000 + $1.to_i
        link_to "Microsoft Security Bulletin #{ref}", "https://docs.microsoft.com/en-us/security-updates/securitybulletins/#{year}/#{ref}", target: '_blank'
      when 'MSKB'
        link_to "Microsoft KB#{ref}", "https://support.microsoft.com/en-us/help/#{ref}", target: '_blank'
      when 'EDB-ID'
        link_to "exploit-db:#{ref}", "https://www.exploit-db.com/exploits/#{ref}", target: '_blank'
      when 'OSVDB'
        nil
      else
        "#{type}:#{ref}"
      end
    end.compact.join(', ').html_safe
  end

  #
  # format: "96703"
  #
  def link_to_bids(bids)
    bids.map do |bid|
      url = "http://www.securityfocus.com/bid/#{bid}"
      link_to bid, url, target: '_blank'
    end.join(', ').html_safe
  end

  #
  # format: "CVE-2017-0143"
  #
  def link_to_cves(cves)
    cves.map do |cve|
      # url = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=#{cve}"
      url = "https://www.cvedetails.com/cve/#{cve}/"

      link_to cve, url, target: '_blank'
    end.join(', ').html_safe
  end

  #
  #
  #
  def certs(certlist)
    return "" if certlist.empty?
    certlist = [certlist] if certlist.kind_of? Hash
    certlist.map do |c|
      "#{c['type']}: #{c['id']}"
    end.join("; ").html_safe
  end
end
